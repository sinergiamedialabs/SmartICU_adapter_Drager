/*******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/
apply plugin: 'java'

// jplourde hacked this together March 13 with

// By default we build (no task specified)
defaultTasks 'build'

sourceCompatibility = JAVA_VERSION_SOURCE
targetCompatibility = JAVA_VERSION_CLASSES

// configuration for code generation
configurations { rtiddsgen }

def GENERATED_JAVA_SOURCES = new File(project.projectDir, 'build/generated/src/main/java').getPath()
def GENERATED_CPP_SOURCES  = new File(project.projectDir, 'build/generated/src/main/cpp').getPath()

// add generated source code to the main java sourceset
sourceSets {
  main {
    java {
      srcDirs += GENERATED_JAVA_SOURCES
    }
  }
}

// include java source code in the assembled jar
jar.doFirst {
  sourceSets.main.java.srcDirs.each {
    from it
  }
}

dependencies {
  // nddsjava.jar is the java binding library for RTI DDS
  compile files('../../artifacts/nddsjava-5.1-mdpnp-000007.jar')
  //This next slf4j entry appears to have been a missing dependency somehow?
  //Rather than a migration from mdpnp artifactory...
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'

  //compile project(':data-types:x73-idl')
  testCompile group: 'junit', name: 'junit', version: '4.11'

  // all these dependencies are for the code generator
  rtiddsgen project(':data-types:x73-idl')
  rtiddsgen files('../../artifacts/rtiddsgen-resource-5.1.zip','../../artifacts/rtiddsgen-5.1.jar','../../artifacts/cpp-bin-1.2.8-SNAPSHOT.zip')
  rtiddsgen group: 'xalan', name: 'xalan', version: '2.7.1'
  rtiddsgen group: 'org.antlr', name: 'antlr', version: '3.5'
  rtiddsgen group: 'org.aspectj', name: 'aspectjrt', version: '1.7.2'
}

// makes output directories for the code generator
task mkdirs {
  doLast {
    file(GENERATED_JAVA_SOURCES).mkdirs()
    file(GENERATED_CPP_SOURCES).mkdirs()
  }
}

// explodes resources (xml schema, etc) used by rtiddsgen
task rtiddsgenExplodeResources(type: Copy) {
  //  dirMode = 0755
  //  fileMode = 0644
    //println 'rtiddsgenExplodeResources started'
    configurations.rtiddsgen.filter {
      it.toString().endsWith(".zip")}.each {
     // println it
      from zipTree(it) into new File(project.projectDir, 'build/rtiddsgen').getPath()}
    //println 'rtiddsgenExplodeResources ended'
}

// Runs the RTI DDS Generate code generator for all idl files under src/main/idl
task rtiddsgenJava(dependsOn: [mkdirs, rtiddsgenExplodeResources]) {
  doLast {
  //println project(':x73-idl').build.source
  //println project(':x73-idl').projectDir
  //  FileCollection idlFiles = project(':x73-idl').build.source
  //For gradle 5 where build task cannot be overridden, build is now buildZip
  FileTree idlFiles = project(':data-types:x73-idl').buildZip.source

  //println idlFiles
  String loc = 'build/rtiddsgen/jcpp'

  if(System.properties['os.name'].toLowerCase().contains("windows")) {
    loc = loc + '.cmd'
  }

  String myMain = 'com.rti.ndds.nddsgen.Main'
  List<String> myArgs = ['-language', 'Java']
  myArgs.addAll(['-ppPath', loc])
  myArgs.addAll(['-d', GENERATED_JAVA_SOURCES])
  myArgs.addAll(['-ppOption', '-I'+project(':data-types:x73-idl').projectDir.getPath()+'/src/main/idl'])
  myArgs.add('-replace')
  myArgs.add('-inputIdl')
  
  new ByteArrayOutputStream().withStream { os ->
  
      for(File f : idlFiles) {
        println 'Generating from ' + f.name
        myArgs.add(f.getPath())
        try {
            javaexec {
              classpath = configurations.rtiddsgen
              jvmArgs = ['-DNDDS_RESOURCE_DIR=build/rtiddsgen/resource/']
              main = myMain
              args = myArgs
              standardOutput = os
            }
        } finally {
            // The jcpp preprocessor will not recognize these #pragmas used by the PrismTech code generator
            // This will capture and hide warnings from the preprocessor that make people think that things have gone
            // more wrong than they have
            // This in a finally block to ensure we do print to screen messages related any errors that may have abnormally 
            // terminated the code generator.
            print os.toString().replaceAll(/.*warning: Unknown #pragma: keylist\r?\n/, "")
        }
        os.reset()
        myArgs.remove(myArgs.size()-1)
      }
  }
  }
}

// Deletes the java code generated by the RTI DDS code generator
task cleanRtiddsgenJava(type: Delete) {
  delete GENERATED_JAVA_SOURCES, GENERATED_CPP_SOURCES
}

// IDL files are the inputs to the code generator
//rtiddsgenJava.inputs.source(fileTree(dir: 'src/main/idl').include('**/*.idl'))
//rtiddsgenJava.inputs.source.collect { (project(':data-types:x73-idl').buildZip.source) }
rtiddsgenJava.inputs.sourceFiles.collect { (project(':data-types:x73-idl').buildZip.source) }

// java files under generated/src/main/java are the outputs of the code generator
rtiddsgenJava.outputs.files(fileTree(dir: GENERATED_JAVA_SOURCES).include('**/*.java'))

// before compiling java code generation must complete
compileJava.dependsOn 'rtiddsgenJava'

// before cleaning generated sources should be cleaned
clean.dependsOn 'cleanRtiddsgenJava'

//Need to call this from build - or maybe just use defaultTask?
build.dependsOn 'rtiddsgenJava'

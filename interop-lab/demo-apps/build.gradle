/*******************************************************************************
 * Copyright (c) 2017, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/
/*
apply plugin: 'java'
apply plugin: 'application'
apply plugin: "me.champeau.jbake"
apply from: 'javafx.plugin'
*/
buildscript {

    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }

    repositories {
        maven {
            url 'https://build.openice.info/artifactory/remote-repos' 
        }
        maven {
            url="https://dl.bintray.com/calmdev/gradle-plugins"
        }
        mavenLocal()
        mavenCentral()
    }
}

repositories {
  mavenLocal()
  mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'
//apply plugin: "me.champeau.jbake"
apply plugin: 'javafx-gradle-plugin'

defaultTasks 'build'

/*
jfxDeploy {
    verbose = true
}
*/

distZip {
}

distTar {
}

applicationName = 'adapter'

jfx {
    verbose=true
    //appID 'org.mdpnp.apps.testapp.Main'
    appName="adapter"
    mainClass="org.mdpnp.apps.testapp.Main"
    jfxAppOutputDir = "build/distributions"
    jfxMainAppJarName = "demo-apps.jar"
    deployDir = "src/deploy"
    useEnvironmentRelativeExecutables = true
    //Think libFolderName might be equivalent to "app" being the deployment directory in the old plugin
    libFolderName = "lib"

    // gradle jfxJar
    css2bin = false
    preLoader = null // String
    updateExistingJar = false
    allPermissions = false
    manifestAttributes = null // Map<String, String>
    addPackagerJar = true
    copyAdditionalAppResourcesToJar = false
    skipCopyingDependencies = false
    useLibFolderContentForManifestClasspath = false
    fixedManifestClasspath = null

    identifier = null  // String - setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "mdpnp.org"
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
    jvmProperties = null // Map<String, String>
    jvmArgs = null // List<String>
    userJvmArgs = null // Map<String, String>
    launcherArguments = null // List<String>
    nativeReleaseVersion = "1.0"
    needShortcut = false
    needMenu = false
/*
    bundleArguments = [
        // dont bundle JRE (not recommended, but increases build-size/-speed)
        //runtime: null
    ]
*/
    appName = "OpenICE" // this is used for files below "src/main/deploy", e.g. "src/main/deploy/package/windows/project.ico"
    additionalBundlerResources = null // path to some additional resources for the bundlers when creating application-bundle
    additionalAppResources = null // path to some additional resources when creating application-bundle
    secondaryLaunchers = []	//Don't need any other .exes
    fileAssociations = null // List<Map<String, Object>>
    noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing
    customBundlers = null // List<String>
    failOnError = false
    onlyCustomBundlers = false
    skipJNLP = false
    skipNativeVersionNumberSanitizing = false // anything than numbers or dots are removed
    additionalJarsignerParameters = null // List<String>
    skipMainClassScanning = false // set to true might increase build-speed
    
    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipNativeLauncherWorkaround205 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false
    skipMacBundlerWorkaround = false
    
    // gradle jfxRun
    runJavaParameter = null // String
    runAppParameter = null // String

    // per default the outcome of the gradle "jarTask" will be used, set this to specify otherwise (like proguard-output)
    alternativePathToJarFile = null // String
    
    // to disable patching of ant-javafx.jar, set this to false
    usePatchedJFXAntLib = false
    
    // making it able to support absolute paths, defaults to "false" for maintaining old behaviour
    checkForAbsolutePaths = false
    
    // gradle jfxGenerateKeyStore
    keyStore = "src/main/deploy/keystore.jks"
    keyStoreAlias = "myalias"
    keyStorePassword = "password"
    keyPassword = null // will default to keyStorePassword
    keyStoreType = "jks"
    overwriteKeyStore = false
    
    certDomain = null // required
    certOrgUnit = null // defaults to "none"
    certOrg = null // required
    certState = null // required
    certCountry = null // required
}
    
/*
jbake {
    srcDirName = 'src/docs'
    destDirName = 'docs'
}
*/


sourceCompatibility = JAVA_VERSION_SOURCE
targetCompatibility = JAVA_VERSION_CLASSES

mainClassName = 'org.mdpnp.apps.testapp.Main'

Date buildTimeAndDate = new Date()
ext {
    buildDate = new java.text.SimpleDateFormat('dd-MMM-yyyy').format(buildTimeAndDate)
    buildTime = new java.text.SimpleDateFormat('hh:mm aa').format(buildTimeAndDate)
    specificationVersion = project.version.substring(0, project.version.lastIndexOf('.')) 
}

manifest { attributes "Main-Class" : mainClassName }

dependencies {
    compile project(':interop-lab:demo-devices')
    compile project(':interop-lab:demo-guis')
    compile project(':interop-lab:demo-guis-javafx')
    compile project(':interop-lab:demo-purejavacomm')
//    implementation 'com.github.purejavacomm:purejavacomm:1.0.2.RELEASE'

    runtime group: 'org.slf4j', name: 'slf4j-log4j12', version: SLF4J_VERSION
    compile files('../../artifacts/mdpnp-sounds-0.1.0.jar')

    //
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
    
    // Default capture device is a trimmed down piece of OpenIMAJ
    compile group: 'com.github.sarxos', name: 'webcam-capture', version: '0.3.10'

    compile group: 'org.springframework', name: 'spring-context', version: '4.1.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-jdbc',    version: '4.1.3.RELEASE'
    compile group: 'com.google.guava',    name: 'guava',          version: '18.0'

    compile group: 'ca.uhn.hapi', name: 'hapi-base', version: '2.2'
    compile group: 'ca.uhn.hapi', name: 'hapi-structures-v26', version: '2.2'
    
    compile group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-base', version: '0.9'
    compile group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-structures-dstu2', version: '0.9'
    
    compile files('../../artifacts/Utility-0.0.1.jar')
    
    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.12'

    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.2'

    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.4.1'

    compile group: 'org.mongodb', name: 'bson',                version: '3.2.2'
    compile group: 'org.mongodb', name: 'mongodb-driver-core', version: '3.2.2'
    compile group: 'org.mongodb', name: 'mongodb-driver',      version: '3.2.2'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    
    compile files('../../artifacts/pixelmed.jar')
    
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
    
    implementation 'com.amazonaws:aws-java-sdk-s3'
    compile group: 'software.amazon.awssdk', name: 's3-transfer-manager', version: '2.17.16-PREVIEW'
}

jar {
    manifest {
        attributes("Main-Class": 'org.mdpnp.apps.testapp.Main', 
        "Built-By": System.properties['user.name'], 
        "Created-By": System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.getProperty("java.vm.version") + ")",
        "Implementation-Title": project.name, 
        "Implementation-Version": project.version, 
        "Build-Date": buildDate, 
        "Build-Time": buildTime,
        "Specification-Title": project.name, 
        "Specification-Version": specificationVersion, 
        "Implementation-Vendor": project.group,
        "Specification-Vendor": project.group, 
        "Build-Number": project.version)
    }
    //Ensure that jfxNative gets run immediately after jar, and so before distZip and distTar
}

test {
	systemProperty 'user.timezone' , 'EST'
}
